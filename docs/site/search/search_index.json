{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Docs > Index # Welcome to the docs! # This is a short description of the files included in the dataset, along with variable descriptions where applicable. These can also be read on GitHub (at docs/content ). Reporting Issues # If you encounter any issues or bugs in the data or this Docs, please report them using the GitHub issues feature in the repository. This will help us to track and address the issue as quickly as possible. To report an issue, simply navigate to the repository and click on the \"Issues\" tab. From there, you can create a new issue and provide a detailed description of the problem you are experiencing or the bug you have found. Thank you for helping us to improve this project!","title":"[docs]"},{"location":"#docs-index","text":"","title":"Docs &gt; Index"},{"location":"#welcome-to-the-docs","text":"This is a short description of the files included in the dataset, along with variable descriptions where applicable. These can also be read on GitHub (at docs/content ).","title":"Welcome to the docs!"},{"location":"#reporting-issues","text":"If you encounter any issues or bugs in the data or this Docs, please report them using the GitHub issues feature in the repository. This will help us to track and address the issue as quickly as possible. To report an issue, simply navigate to the repository and click on the \"Issues\" tab. From there, you can create a new issue and provide a detailed description of the problem you are experiencing or the bug you have found. Thank you for helping us to improve this project!","title":"Reporting Issues"},{"location":"pipeline/","text":"Great Tit Dataset Pipeline # This pipeline processes and prepares the Great Tit song dataset for sharing. It consists of the following steps: Step Script Description 1 0.1-broods.py This script reads in bird breeding data from a CSV file, cleans and filters the data, and then saves the cleaned data to a new CSV file. It also generates several plots to visualize the data, including the number of unique bird broods per year, the proportion of different bird species over time, and the number of missing lay dates per year. 2 0.2-morphometrics.py Reads in bird morphometrics data from the original CSV file, cleans and filters the data, and then saves it to a new CSV file. It also generates several plots, including the number of unique birds per year and the oldest birds in the dataset. 3 0.3-nestboxes.py Reads in bird nestbox data, cleans and filters it, then saves the cleaned data to a new CSV file and generates several plots to visualize the data, including a scatterplot for each variable and a plot of the nestbox positions and perimeter of the study area. 4 0.4-assign-recordings.py Reads in bird nestbox data and bird recordings data, and assigns recordings to breeding attempts in the nestboxes. It then renames the directories containing the recordings to include the year and breeding attempt number for each nestbox. 5 0.5-link-metadata.py This script prepares metadata on bird immigration status, natal nest box if known, bird age, sampling information (effort, missing data, time and date, delay with respect to first egg). 6 0.6-first-morning-song.py Extracts information on the time of day when the birds first sing from the annotation XML files. It then creates plots showing the distribution of the time of day when the birds first sing, as well as the time since sunrise when the first song is sung. Finally, it plots the time of first song vs date for each year, by individual bird. 7 1.0-segment-data.py Segments the recordings into individual songs and saves each song as a separate file. This first step is run on the full soundscape dataset (~9TB). 8 2.0-prepare-dataset.py Prepares the dataset by calculating and cleaning spectrograms, finding and labelling notes, etc. See the pykanto docs for more information. 9 3.0-review-dataset.py This script is used to review the dataset and remove noise and labelling mistakes. It should be run manually and carefully - requires user imput - and it should only run once after the dataset has been labelled. 10 5.0-export-train-set.py Exports a training set of songs for use in machine learning models. 11 5.1-export-img-set.py Exports the full set of spectrograms for infrence. 12 6.0-link-all.py Cleans and reorders the columns, exports feature vectors derived from the metric learning model as CSV, removes bad files, updates JSONs, and extracts various statistics from the data to a markdown table. 13 7.0-validate-segs.py This script/simple app can be used to check the results of the note segmentation procedure and calculate the percentage of notes that were correctly segmented. Requires user input. 14 10.0-share-dataset.py Prepares the dataset for sharing by creating a ZIP file with all necessary files and saving this and the CSV metadata files to a new repo, great-tit-hits . Visualisation and configuration files # auxiliary.py : Contains helper functions to create/use xml files. config.py : Contains configuration settings for the project. plot-general-figs.py : Plots general figures (Fig 1 in paper). plot-song-time-date.py : Plots song activity vs time of the season and time of the day (3D plot). plot-song-vs-laydate-2d.py : Plots the relationship between song activity and lay date. plot-song-vs-laydate.py : Plots the relationship between song activity and lay date (3D plot). plot-spectrograms.py : Plot example spectrograms of the songs. Instructions # Note : Some original and intermediate files are quite heavy, and the process is generally computationally intensive. I have run most of this pipeline on the University HPC cluster. Steps 1 through 6 and 7 through 14 can be reproduced by cloning this repository and using the raw data provided at https://osf.io/n8ac9/ . I have assumed that the data will be located in some form of external storage, so you would need to change the path to this manually in scripts/config.py . To run the pipeline, follow these steps: 1 | Clone the repository to your local machine and install the package locally git clone https://github.com/nilomr/great-tit-hits-setup.git cd great-tit-hits-setup pip install . # Or pip install -e '.[dev, test, doc]' if you want to develop See the installation instructions for pykanto if you are going to use GPUs: 2 | Place the song data from https://osf.io/n8ac9/ in a data/segmented/great-tit-hits directory under the project root. See how to set up a project in pykanto for an example of the project structure. Note: the config.py file will try to create a symlink from a 'data' folder in your project to the external data location specified there, you don't need to do this manually as long as you provide a path to a location following the /segmented/great-tit-hits/ pattern that has the /WAV and /JSON directories in it. 3 | Run each script in order, starting with 0.1-broods.py and ending with 10.0-share-dataset.py . Note: You should skip step 7, 1.0-segment-data.py , this requires the full soundscape recordings, which are not provided for practical reasons: it's 9TB of mostly other birds and sounds. Do let me know if you want them and have a good system to transfer them! 4 | The final output will be a ZIP file containing the song data and several CSV files with the relevant metadata","title":"pipeline"},{"location":"pipeline/#great-tit-dataset-pipeline","text":"This pipeline processes and prepares the Great Tit song dataset for sharing. It consists of the following steps: Step Script Description 1 0.1-broods.py This script reads in bird breeding data from a CSV file, cleans and filters the data, and then saves the cleaned data to a new CSV file. It also generates several plots to visualize the data, including the number of unique bird broods per year, the proportion of different bird species over time, and the number of missing lay dates per year. 2 0.2-morphometrics.py Reads in bird morphometrics data from the original CSV file, cleans and filters the data, and then saves it to a new CSV file. It also generates several plots, including the number of unique birds per year and the oldest birds in the dataset. 3 0.3-nestboxes.py Reads in bird nestbox data, cleans and filters it, then saves the cleaned data to a new CSV file and generates several plots to visualize the data, including a scatterplot for each variable and a plot of the nestbox positions and perimeter of the study area. 4 0.4-assign-recordings.py Reads in bird nestbox data and bird recordings data, and assigns recordings to breeding attempts in the nestboxes. It then renames the directories containing the recordings to include the year and breeding attempt number for each nestbox. 5 0.5-link-metadata.py This script prepares metadata on bird immigration status, natal nest box if known, bird age, sampling information (effort, missing data, time and date, delay with respect to first egg). 6 0.6-first-morning-song.py Extracts information on the time of day when the birds first sing from the annotation XML files. It then creates plots showing the distribution of the time of day when the birds first sing, as well as the time since sunrise when the first song is sung. Finally, it plots the time of first song vs date for each year, by individual bird. 7 1.0-segment-data.py Segments the recordings into individual songs and saves each song as a separate file. This first step is run on the full soundscape dataset (~9TB). 8 2.0-prepare-dataset.py Prepares the dataset by calculating and cleaning spectrograms, finding and labelling notes, etc. See the pykanto docs for more information. 9 3.0-review-dataset.py This script is used to review the dataset and remove noise and labelling mistakes. It should be run manually and carefully - requires user imput - and it should only run once after the dataset has been labelled. 10 5.0-export-train-set.py Exports a training set of songs for use in machine learning models. 11 5.1-export-img-set.py Exports the full set of spectrograms for infrence. 12 6.0-link-all.py Cleans and reorders the columns, exports feature vectors derived from the metric learning model as CSV, removes bad files, updates JSONs, and extracts various statistics from the data to a markdown table. 13 7.0-validate-segs.py This script/simple app can be used to check the results of the note segmentation procedure and calculate the percentage of notes that were correctly segmented. Requires user input. 14 10.0-share-dataset.py Prepares the dataset for sharing by creating a ZIP file with all necessary files and saving this and the CSV metadata files to a new repo, great-tit-hits .","title":"Great Tit Dataset Pipeline"},{"location":"pipeline/#visualisation-and-configuration-files","text":"auxiliary.py : Contains helper functions to create/use xml files. config.py : Contains configuration settings for the project. plot-general-figs.py : Plots general figures (Fig 1 in paper). plot-song-time-date.py : Plots song activity vs time of the season and time of the day (3D plot). plot-song-vs-laydate-2d.py : Plots the relationship between song activity and lay date. plot-song-vs-laydate.py : Plots the relationship between song activity and lay date (3D plot). plot-spectrograms.py : Plot example spectrograms of the songs.","title":"Visualisation and configuration files"},{"location":"pipeline/#instructions","text":"Note : Some original and intermediate files are quite heavy, and the process is generally computationally intensive. I have run most of this pipeline on the University HPC cluster. Steps 1 through 6 and 7 through 14 can be reproduced by cloning this repository and using the raw data provided at https://osf.io/n8ac9/ . I have assumed that the data will be located in some form of external storage, so you would need to change the path to this manually in scripts/config.py . To run the pipeline, follow these steps: 1 | Clone the repository to your local machine and install the package locally git clone https://github.com/nilomr/great-tit-hits-setup.git cd great-tit-hits-setup pip install . # Or pip install -e '.[dev, test, doc]' if you want to develop See the installation instructions for pykanto if you are going to use GPUs: 2 | Place the song data from https://osf.io/n8ac9/ in a data/segmented/great-tit-hits directory under the project root. See how to set up a project in pykanto for an example of the project structure. Note: the config.py file will try to create a symlink from a 'data' folder in your project to the external data location specified there, you don't need to do this manually as long as you provide a path to a location following the /segmented/great-tit-hits/ pattern that has the /WAV and /JSON directories in it. 3 | Run each script in order, starting with 0.1-broods.py and ending with 10.0-share-dataset.py . Note: You should skip step 7, 1.0-segment-data.py , this requires the full soundscape recordings, which are not provided for practical reasons: it's 9TB of mostly other birds and sounds. Do let me know if you want them and have a good system to transfer them! 4 | The final output will be a ZIP file containing the song data and several CSV files with the relevant metadata","title":"Instructions"},{"location":"metadata/feature_vectors/","text":"Model-Based Feature Vectors # This CSV file contains model-based feature vectors for a the entire dataset, with 109,963 samples and 384 dimensions. Each row in the file represents a sample, and each column represents a feature. The feature vectors were generated using a deep learning model trained on the dataset. See the article for further information. The feature vectors can be used as input to other machine learning models or for data analysis tasks. They can also be used to visualize the data in lower dimensions using techniques such as t-SNE or PCA. File Format # The file is in CSV format, with each row representing a sample and each column representing a feature. The first row of the file contains the column names, which you can disregard, and there is no index.","title":"feature_vectors.csv"},{"location":"metadata/feature_vectors/#model-based-feature-vectors","text":"This CSV file contains model-based feature vectors for a the entire dataset, with 109,963 samples and 384 dimensions. Each row in the file represents a sample, and each column represents a feature. The feature vectors were generated using a deep learning model trained on the dataset. See the article for further information. The feature vectors can be used as input to other machine learning models or for data analysis tasks. They can also be used to visualize the data in lower dimensions using techniques such as t-SNE or PCA.","title":"Model-Based Feature Vectors"},{"location":"metadata/feature_vectors/#file-format","text":"The file is in CSV format, with each row representing a sample and each column representing a feature. The first row of the file contains the column names, which you can disregard, and there is no index.","title":"File Format"},{"location":"metadata/great-tit-hits/","text":"Great Tit Hits Dataset # The great-tit-hits.csv file contains information about individual bird songs detected in audio recordings. It contains the following columns: File Format # The first row contains the column names and the first column (without name) is as the index. The 'onsets', 'offsets', 'silence_durations', and 'unit_durations' columns are lists and need to be parsed as such. Alternatively, these data can be gathered from the JSON metadata files in data/songs/*/JSON . Variable descriptions # Column Name Description ID Unique identifier for each breeding attempt associated to the song. This is equivalent to the 'pnum' column in other files, and allows us to associate the song with the identity of the bird that produced it (with some uncertainty), or, if the bird was not caught, to have a proxy for it class_id Unique song type identifier. Number of unique class_id for one ID = repertoire size. datetime Date and time of the vocalization start Start time of the vocalization in frames (for bounding box) end End time of the vocalization in frames (for bounding box) length_s Duration of the vocalization in seconds bit_rate Bit rate of the audio recording sample_rate Original sample rate of the audio recording. Downsampled to 22050 Hz lower_freq Lower frequency bound of the vocalization (for bounding box) upper_freq Upper frequency bound of the vocalization (for bounding box) max_amplitude Maximum amplitude of the vocalization onsets List of onset times for each note in the vocalization offsets List of offset times for each note in the vocalization silence_durations List of silence durations between each unit in the vocalization unit_durations List of durations for each unit (note) in the vocalization","title":"great-tit-hits.csv"},{"location":"metadata/great-tit-hits/#great-tit-hits-dataset","text":"The great-tit-hits.csv file contains information about individual bird songs detected in audio recordings. It contains the following columns:","title":"Great Tit Hits Dataset"},{"location":"metadata/great-tit-hits/#file-format","text":"The first row contains the column names and the first column (without name) is as the index. The 'onsets', 'offsets', 'silence_durations', and 'unit_durations' columns are lists and need to be parsed as such. Alternatively, these data can be gathered from the JSON metadata files in data/songs/*/JSON .","title":"File Format"},{"location":"metadata/great-tit-hits/#variable-descriptions","text":"Column Name Description ID Unique identifier for each breeding attempt associated to the song. This is equivalent to the 'pnum' column in other files, and allows us to associate the song with the identity of the bird that produced it (with some uncertainty), or, if the bird was not caught, to have a proxy for it class_id Unique song type identifier. Number of unique class_id for one ID = repertoire size. datetime Date and time of the vocalization start Start time of the vocalization in frames (for bounding box) end End time of the vocalization in frames (for bounding box) length_s Duration of the vocalization in seconds bit_rate Bit rate of the audio recording sample_rate Original sample rate of the audio recording. Downsampled to 22050 Hz lower_freq Lower frequency bound of the vocalization (for bounding box) upper_freq Upper frequency bound of the vocalization (for bounding box) max_amplitude Maximum amplitude of the vocalization onsets List of onset times for each note in the vocalization offsets List of offset times for each note in the vocalization silence_durations List of silence durations between each unit in the vocalization unit_durations List of durations for each unit (note) in the vocalization","title":"Variable descriptions"},{"location":"metadata/main/","text":"Main data file # This dataset contains monitoring data for years 2013-2022. The dataset includes information on broods, adult birds, nestboxes, and acoustic recordings (from 2020 onwards). File format # The CSV file has no index column, and the first row contains the column names. The column names provide descriptive labels for each variable in the dataset. Variable descriptions # Column Name Explanation year The year when the data was recorded pnum Nesting attempt identifier, unique to each attempt. It's made up of the year, the number of nesting attempts in the same box that year (1 for the first attempt, 2 for the second attempt in the same box, etc.), and the nest box number. Corresponds to 'ID' in the song dataset ( great-tit-hits.csv ). nestbox The name of the nest box. clear_date The date when the nest box was cleared, indicating the end of a nesting attempt. missing_entire_brood Indicates whether the entire brood (chicks) is missing or not. suspected_predation Indicates whether suspected predation occurred during the nesting attempt. lay_date The date of laying, recorded as the day of the year (\"YYYY-MM-DD\") when the first egg was seen. april_lay_date The lay date as an April date, where April 1 is 1. lay_date_visit_interval The interval in days between the laying date and the nest box visit. laying_rate The rate of egg-laying, calculated as the number of eggs laid per day. incubation_started Indicates whether incubation of the eggs has started or not (can disregard) num_broken_eggs The number of eggs that were broken (accidentally by field workers) during the nesting attempt. hatch_date The date of hatch, recorded as the day of the year (\"YYYY-MM-DD\"). april_hatch_date The hatch date as an April day, with April 1st being 1. incubation_duration The duration of time that the eggs were incubated, when known when they hatched. total_egg_weight The total weight of all eggs weighed. We also weigh 3 or 4 eggs to get an average. num_eggs_weighed The number of eggs weighed. clutch_size The total number of eggs when incubation starts. num_chicks The number of chicks that are seen to hatch, counted when first seen hatching and again at around day 5 when faceplate. Some might not be hatched at the first visit, and some might hatch and die and be taken out by parents by the second visit. num_chicks_ringed The number of chicks that are alive and big enough to take a ring at day 15. april_ring_date The date when the chicks were ringed (\"YYYY-MM-DD\"). ring_day How many days old the chicks were when they were ringed. num_live_chicks The number of chicks that are alive when they are ringed. num_dead_chicks The number of chicks that are dead. This can occur on more than one visit. num_fledglings Calculated by counting the number of chicks left dead in the box after the rest have fledged. mean_chick_weight The mean weight of chicks at 15 days old. father The BTO (British Trust for Ornithology) ring of the father, assumed to be the bird feeding the young. mother The BTO ring of the mother. resident Indicates whether the bird is a resident or not. natal_box The nest box where the bird was born. year_born The year the bird was born, if known. bto_age The age of the bird (British Trust for Ornithology code) classification. age The age of the bird. This is exact if the bird was ringed as a pullus in the population, or approximate (based on plumage moult) otherwise. x The X coordinate (Easting) of the bird's nest box. Uses the British National Grid Eastings and Northings. y The Y coordinate (Northing) of the bird's nest box. Uses the British National Grid Eastings and Northings. type The type of nest box (great tit or blue tit -size). poly The areas of Thiessen polygons formed around all nest boxes, restricting areas to within the perimeter of the woodland (nest box spacing polygons). edge_edi Edge distance index (EDI). Accounts for the number and distribution of habitat edges in close proximity to the nest box. See: Wilkin, Teddy A., et al. \"Edge Effects in the Great Tit: Analyses of Long-Term Data with GIS Techniques.\" Conservation Biology, vol. 21, no. 5, 2007, pp. 1207\u201317. JSTOR, http://www.jstor.org/stable/4620944 altitude_m The nest box altitude in meters. aspect The aspect of the bird's nest box. Used to calculate northness. northness The northness value of the bird's nest box. See WILKIN, T.A., PERRINS, C.M. and SHELDON, B.C. (2007), The use of GIS in estimating spatial variation in habitat quality: a case study of lay-date in the Great Tit Parus major . Ibis, 149: 110-118. https://doi.org/10.1111/j.1474-919X.2007.00757.x habitat_type The type of habitat the nest box is in. soil_type The type of soil around the nest box. recorded Indicates whether the bird was recorded or not. total_recordings The total number of recordings for the bird (1 recording = 1h, quantifies sampling effort) missing_recordings The number of missing recordings for the bird due to equipment malfunction. first_recorded The first recorded date for the bird. last_recorded The last recorded date for the bird. delay The difference between first recording date and lay_date . n_vocalisations Number of songs by a bird in the dataset (a good proxy for n songs produced) repertoire_size The size of the bird's repertoire, i.e., the number of different song types it produced.","title":"main.csv"},{"location":"metadata/main/#main-data-file","text":"This dataset contains monitoring data for years 2013-2022. The dataset includes information on broods, adult birds, nestboxes, and acoustic recordings (from 2020 onwards).","title":"Main data file"},{"location":"metadata/main/#file-format","text":"The CSV file has no index column, and the first row contains the column names. The column names provide descriptive labels for each variable in the dataset.","title":"File format"},{"location":"metadata/main/#variable-descriptions","text":"Column Name Explanation year The year when the data was recorded pnum Nesting attempt identifier, unique to each attempt. It's made up of the year, the number of nesting attempts in the same box that year (1 for the first attempt, 2 for the second attempt in the same box, etc.), and the nest box number. Corresponds to 'ID' in the song dataset ( great-tit-hits.csv ). nestbox The name of the nest box. clear_date The date when the nest box was cleared, indicating the end of a nesting attempt. missing_entire_brood Indicates whether the entire brood (chicks) is missing or not. suspected_predation Indicates whether suspected predation occurred during the nesting attempt. lay_date The date of laying, recorded as the day of the year (\"YYYY-MM-DD\") when the first egg was seen. april_lay_date The lay date as an April date, where April 1 is 1. lay_date_visit_interval The interval in days between the laying date and the nest box visit. laying_rate The rate of egg-laying, calculated as the number of eggs laid per day. incubation_started Indicates whether incubation of the eggs has started or not (can disregard) num_broken_eggs The number of eggs that were broken (accidentally by field workers) during the nesting attempt. hatch_date The date of hatch, recorded as the day of the year (\"YYYY-MM-DD\"). april_hatch_date The hatch date as an April day, with April 1st being 1. incubation_duration The duration of time that the eggs were incubated, when known when they hatched. total_egg_weight The total weight of all eggs weighed. We also weigh 3 or 4 eggs to get an average. num_eggs_weighed The number of eggs weighed. clutch_size The total number of eggs when incubation starts. num_chicks The number of chicks that are seen to hatch, counted when first seen hatching and again at around day 5 when faceplate. Some might not be hatched at the first visit, and some might hatch and die and be taken out by parents by the second visit. num_chicks_ringed The number of chicks that are alive and big enough to take a ring at day 15. april_ring_date The date when the chicks were ringed (\"YYYY-MM-DD\"). ring_day How many days old the chicks were when they were ringed. num_live_chicks The number of chicks that are alive when they are ringed. num_dead_chicks The number of chicks that are dead. This can occur on more than one visit. num_fledglings Calculated by counting the number of chicks left dead in the box after the rest have fledged. mean_chick_weight The mean weight of chicks at 15 days old. father The BTO (British Trust for Ornithology) ring of the father, assumed to be the bird feeding the young. mother The BTO ring of the mother. resident Indicates whether the bird is a resident or not. natal_box The nest box where the bird was born. year_born The year the bird was born, if known. bto_age The age of the bird (British Trust for Ornithology code) classification. age The age of the bird. This is exact if the bird was ringed as a pullus in the population, or approximate (based on plumage moult) otherwise. x The X coordinate (Easting) of the bird's nest box. Uses the British National Grid Eastings and Northings. y The Y coordinate (Northing) of the bird's nest box. Uses the British National Grid Eastings and Northings. type The type of nest box (great tit or blue tit -size). poly The areas of Thiessen polygons formed around all nest boxes, restricting areas to within the perimeter of the woodland (nest box spacing polygons). edge_edi Edge distance index (EDI). Accounts for the number and distribution of habitat edges in close proximity to the nest box. See: Wilkin, Teddy A., et al. \"Edge Effects in the Great Tit: Analyses of Long-Term Data with GIS Techniques.\" Conservation Biology, vol. 21, no. 5, 2007, pp. 1207\u201317. JSTOR, http://www.jstor.org/stable/4620944 altitude_m The nest box altitude in meters. aspect The aspect of the bird's nest box. Used to calculate northness. northness The northness value of the bird's nest box. See WILKIN, T.A., PERRINS, C.M. and SHELDON, B.C. (2007), The use of GIS in estimating spatial variation in habitat quality: a case study of lay-date in the Great Tit Parus major . Ibis, 149: 110-118. https://doi.org/10.1111/j.1474-919X.2007.00757.x habitat_type The type of habitat the nest box is in. soil_type The type of soil around the nest box. recorded Indicates whether the bird was recorded or not. total_recordings The total number of recordings for the bird (1 recording = 1h, quantifies sampling effort) missing_recordings The number of missing recordings for the bird due to equipment malfunction. first_recorded The first recorded date for the bird. last_recorded The last recorded date for the bird. delay The difference between first recording date and lay_date . n_vocalisations Number of songs by a bird in the dataset (a good proxy for n songs produced) repertoire_size The size of the bird's repertoire, i.e., the number of different song types it produced.","title":"Variable descriptions"},{"location":"metadata/morphometrics/","text":"Morphometrics Dataset # The morphometrics.csv file contains morphological measurements for birds captured and retrapped in a study area. The dataset includes information on species, age, sex, weight, and various body measurements. File Format # The CSV file has no index column, and the first row contains the column names. The column names provide descriptive labels for each variable in the dataset. Variable Descriptions # Column Name Explanation record_type Indicates whether the record is a physical capture (physical) or a remote detection of the PIT tag (diurnal). retrap Whether the record is a retrap or a new capture. bto_ring The BTO (British Trust for Ornithology) ring number of the bird. pit_tag The PIT (Passive Integrated Transponder) tag number of the bird. pit_tag_state The state of the PIT tag (e.g., missing, present, fitted). species The species of the bird (g = great tit) age The age of the bird (BTO age code). sex The sex of the bird. sexing_method The method used to determine the sex of the bird. date_time The date and time of capture or retrap. year The year of capture or retrap. region The region where the bird was captured or retrapped (wyt = Wytham Woods). location The location where the bird was captured or retrapped. fieldworker The name of the fieldworker who captured or retrapped the bird. wing_length The length of the bird's wing (maximum flattened chord) weight The weight of the bird. bill_length_method The method used to measure the length of the bird's bill. bill_length The length of the bird's bill. bill_depth_method The method used to measure the depth of the bird's bill. bill_depth The depth of the bird's bill. tarsus_length_method The method used to measure the length of the bird's tarsus. tarsus_length The length of the bird's tarsus. fat The amount of fat on the bird. fat_method The method used to measure the amount of fat on the bird. pectoral_muscle The size of the bird's pectoral muscle. pox Indicates whether the bird has visible pox growths. leg_condition_description A description of the bird's leg condition. tick_description A description of any ticks found on the bird. comment Any additional comments about the bird.","title":"morphometrics.csv"},{"location":"metadata/morphometrics/#morphometrics-dataset","text":"The morphometrics.csv file contains morphological measurements for birds captured and retrapped in a study area. The dataset includes information on species, age, sex, weight, and various body measurements.","title":"Morphometrics Dataset"},{"location":"metadata/morphometrics/#file-format","text":"The CSV file has no index column, and the first row contains the column names. The column names provide descriptive labels for each variable in the dataset.","title":"File Format"},{"location":"metadata/morphometrics/#variable-descriptions","text":"Column Name Explanation record_type Indicates whether the record is a physical capture (physical) or a remote detection of the PIT tag (diurnal). retrap Whether the record is a retrap or a new capture. bto_ring The BTO (British Trust for Ornithology) ring number of the bird. pit_tag The PIT (Passive Integrated Transponder) tag number of the bird. pit_tag_state The state of the PIT tag (e.g., missing, present, fitted). species The species of the bird (g = great tit) age The age of the bird (BTO age code). sex The sex of the bird. sexing_method The method used to determine the sex of the bird. date_time The date and time of capture or retrap. year The year of capture or retrap. region The region where the bird was captured or retrapped (wyt = Wytham Woods). location The location where the bird was captured or retrapped. fieldworker The name of the fieldworker who captured or retrapped the bird. wing_length The length of the bird's wing (maximum flattened chord) weight The weight of the bird. bill_length_method The method used to measure the length of the bird's bill. bill_length The length of the bird's bill. bill_depth_method The method used to measure the depth of the bird's bill. bill_depth The depth of the bird's bill. tarsus_length_method The method used to measure the length of the bird's tarsus. tarsus_length The length of the bird's tarsus. fat The amount of fat on the bird. fat_method The method used to measure the amount of fat on the bird. pectoral_muscle The size of the bird's pectoral muscle. pox Indicates whether the bird has visible pox growths. leg_condition_description A description of the bird's leg condition. tick_description A description of any ticks found on the bird. comment Any additional comments about the bird.","title":"Variable Descriptions"},{"location":"metadata/nestboxes/","text":"Wytham Woods Nest Box Locations # The nestboxes.csv file contains information on the location and characteristics of nest boxes in Wytham Woods. The dataset includes information on the nest box ID, location coordinates, type, altitude, aspect, and habitat and soil types. These data are also included in main.csv . File Format # The CSV file has no index column, and the first row contains the column names. The column names provide descriptive labels for each variable in the dataset. Variable Descriptions # Column Name Explanation nestbox The ID of the nest box. section The section of Wytham Woods where the nest box is located. x The X coordinate (Easting) of the nest box. Uses the British National Grid Eastings and Northings. y The Y coordinate (Northing) of the nest box. Uses the British National Grid Eastings and Northings. type The type of nest box (great or blue tit-size entrance hole) poly The area of the Thiessen polygon formed around the nest box, restricting areas to within the perimeter of the woodland. edge_edi Edge distance index (EDI). Accounts for the number and distribution of habitat edges in close proximity to the nest box. altitude_m The altitude of the nest box in meters. aspect The aspect of the nest box. northness The northness value of the nest box. habitat_type The type of habitat the nest box is in. soil_type The type of soil around the nest box. Also see: Wilkin, Teddy A., et al. \"Edge Effects in the Great Tit: Analyses of Long-Term Data with GIS Techniques.\" Conservation Biology 21, no. 5 (2007): 1207\u201317. JSTOR. http://www.jstor.org/stable/4620944. Wilkin, T.A., Perrins, C.M., and Sheldon, B.C. \"The use of GIS in estimating spatial variation in habitat quality: a case study of lay-date in the Great Tit Parus major.\" Ibis 149 (2007): 110-118. https://doi.org/10.1111/j.1474-919X.2007.00757.x.","title":"nestboxes.csv"},{"location":"metadata/nestboxes/#wytham-woods-nest-box-locations","text":"The nestboxes.csv file contains information on the location and characteristics of nest boxes in Wytham Woods. The dataset includes information on the nest box ID, location coordinates, type, altitude, aspect, and habitat and soil types. These data are also included in main.csv .","title":"Wytham Woods Nest Box Locations"},{"location":"metadata/nestboxes/#file-format","text":"The CSV file has no index column, and the first row contains the column names. The column names provide descriptive labels for each variable in the dataset.","title":"File Format"},{"location":"metadata/nestboxes/#variable-descriptions","text":"Column Name Explanation nestbox The ID of the nest box. section The section of Wytham Woods where the nest box is located. x The X coordinate (Easting) of the nest box. Uses the British National Grid Eastings and Northings. y The Y coordinate (Northing) of the nest box. Uses the British National Grid Eastings and Northings. type The type of nest box (great or blue tit-size entrance hole) poly The area of the Thiessen polygon formed around the nest box, restricting areas to within the perimeter of the woodland. edge_edi Edge distance index (EDI). Accounts for the number and distribution of habitat edges in close proximity to the nest box. altitude_m The altitude of the nest box in meters. aspect The aspect of the nest box. northness The northness value of the nest box. habitat_type The type of habitat the nest box is in. soil_type The type of soil around the nest box. Also see: Wilkin, Teddy A., et al. \"Edge Effects in the Great Tit: Analyses of Long-Term Data with GIS Techniques.\" Conservation Biology 21, no. 5 (2007): 1207\u201317. JSTOR. http://www.jstor.org/stable/4620944. Wilkin, T.A., Perrins, C.M., and Sheldon, B.C. \"The use of GIS in estimating spatial variation in habitat quality: a case study of lay-date in the Great Tit Parus major.\" Ibis 149 (2007): 110-118. https://doi.org/10.1111/j.1474-919X.2007.00757.x.","title":"Variable Descriptions"},{"location":"metadata/wytham_map/","text":"Wytham Woods Map Data # This directory contains map data for Wytham Woods. The map data is in the form of a shapefile, which are a common format for storing geospatial vector data. Files # perimeter.shx : The shape index file for the Wytham Woods map. perimeter.shp : The geometry for the Wytham Woods map. perimeter.prj : The projection file for the Wytham Woods map. perimeter.dbf : The attributes file for the Wytham Woods map. Usage # The map data can be used to create figures and calculate territory sizes that take into account the shape of the habitat. The shapefiles can be loaded into a GIS software package, such as QGIS, or into a programming language, such as Python, using the geopandas library.","title":"/wytham_map"},{"location":"metadata/wytham_map/#wytham-woods-map-data","text":"This directory contains map data for Wytham Woods. The map data is in the form of a shapefile, which are a common format for storing geospatial vector data.","title":"Wytham Woods Map Data"},{"location":"metadata/wytham_map/#files","text":"perimeter.shx : The shape index file for the Wytham Woods map. perimeter.shp : The geometry for the Wytham Woods map. perimeter.prj : The projection file for the Wytham Woods map. perimeter.dbf : The attributes file for the Wytham Woods map.","title":"Files"},{"location":"metadata/wytham_map/#usage","text":"The map data can be used to create figures and calculate territory sizes that take into account the shape of the habitat. The shapefiles can be loaded into a GIS software package, such as QGIS, or into a programming language, such as Python, using the geopandas library.","title":"Usage"},{"location":"songs/song-files/","text":"Song Data # The songs directory contains audio recordings, along with metadata for each recording. The dataset is split into four zip files: songs \u251c\u2500\u2500 song-files.zip.part1 \u251c\u2500\u2500 song-files.zip.part2 \u251c\u2500\u2500 song-files.zip.part3 \u2514\u2500\u2500 song-files.zip.part4 These files can be stitched together before unzipping using the command cat song-files.zip.part* > sf.zip && zip -FF sf.zip --out song-files.zip , or your preferred method if you are not on a Unix-like system. When you unzip the file, you will see the following structure: song-files \u251c\u2500\u2500 JSON \u2502 \u251c\u2500\u2500 file.JSON \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 WAV \u251c\u2500\u2500 1_20190501_000000_0.wav \u2514\u2500\u2500 ... Dataset Size # There are 109,963 files in each of the WAV and JSON folders. The total size of the dataset is 11.4 GB. File Format # The dataset is provided in ZIP format, with two folders: WAV and JSON . The WAV folder contains the audio recordings in WAV format, and the JSON folder contains the metadata for each recording in JSON format. The filenames match between the two folders-only the extension changes. The WAV files are mono 16-bit PCM audio files with a sample rate of 22,050 Hz. The files are named according to the following convention: <ID>_<YYYYMMDD_HHMMSS>_<start frame>.wav Where ID is the unique identifier for the recording, YYYYMMDD_HHMMSS is the datetime of the recording, and start frame is the start frame of the recording in the original audio file. The JSON files contain metadata for each recording. The files are named according to the same convention, <ID>_<YYYYMMDD_HHMMSS>_<start frame>.JSON , and each file contains the following fields: Key Description sample_rate The sample rate of the audio bit_rate The bit rate of the audio length_s The duration of the audio segment ID The unique identifier for the audio segment label The label associated with the audio segment start The start position of the audio segment end The end position of the audio segment lower_freq The lower frequency bound of the audio segment upper_freq The upper frequency bound of the audio segment max_amplitude The maximum amplitude of the audio segment min_amplitude The minimum amplitude of the audio segment source_wav The file path to the original source WAV file annotation_file The file path to the XML annotation file wav_file The file path to the segmented WAV file class_id The class identifier for the audio segment datetime The date and time of the recording onsets A list of onset times in seconds offsets A list of offset times in seconds silence_durations A list of silence durations in seconds unit_durations A list of unit durations in seconds","title":"song_files"},{"location":"songs/song-files/#song-data","text":"The songs directory contains audio recordings, along with metadata for each recording. The dataset is split into four zip files: songs \u251c\u2500\u2500 song-files.zip.part1 \u251c\u2500\u2500 song-files.zip.part2 \u251c\u2500\u2500 song-files.zip.part3 \u2514\u2500\u2500 song-files.zip.part4 These files can be stitched together before unzipping using the command cat song-files.zip.part* > sf.zip && zip -FF sf.zip --out song-files.zip , or your preferred method if you are not on a Unix-like system. When you unzip the file, you will see the following structure: song-files \u251c\u2500\u2500 JSON \u2502 \u251c\u2500\u2500 file.JSON \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 WAV \u251c\u2500\u2500 1_20190501_000000_0.wav \u2514\u2500\u2500 ...","title":"Song Data"},{"location":"songs/song-files/#dataset-size","text":"There are 109,963 files in each of the WAV and JSON folders. The total size of the dataset is 11.4 GB.","title":"Dataset Size"},{"location":"songs/song-files/#file-format","text":"The dataset is provided in ZIP format, with two folders: WAV and JSON . The WAV folder contains the audio recordings in WAV format, and the JSON folder contains the metadata for each recording in JSON format. The filenames match between the two folders-only the extension changes. The WAV files are mono 16-bit PCM audio files with a sample rate of 22,050 Hz. The files are named according to the following convention: <ID>_<YYYYMMDD_HHMMSS>_<start frame>.wav Where ID is the unique identifier for the recording, YYYYMMDD_HHMMSS is the datetime of the recording, and start frame is the start frame of the recording in the original audio file. The JSON files contain metadata for each recording. The files are named according to the same convention, <ID>_<YYYYMMDD_HHMMSS>_<start frame>.JSON , and each file contains the following fields: Key Description sample_rate The sample rate of the audio bit_rate The bit rate of the audio length_s The duration of the audio segment ID The unique identifier for the audio segment label The label associated with the audio segment start The start position of the audio segment end The end position of the audio segment lower_freq The lower frequency bound of the audio segment upper_freq The upper frequency bound of the audio segment max_amplitude The maximum amplitude of the audio segment min_amplitude The minimum amplitude of the audio segment source_wav The file path to the original source WAV file annotation_file The file path to the XML annotation file wav_file The file path to the segmented WAV file class_id The class identifier for the audio segment datetime The date and time of the recording onsets A list of onset times in seconds offsets A list of offset times in seconds silence_durations A list of silence durations in seconds unit_durations A list of unit durations in seconds","title":"File Format"}]}